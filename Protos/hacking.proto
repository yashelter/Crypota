syntax = "proto3";

option csharp_namespace = "StainsGate";

import "google/protobuf/empty.proto";

package hacking;

// Сервис управления и общения в секретном чате
service HackingGate {
  // Создать новую комнату, возвращает её уникальный идентификатор
  rpc CreateRoom(RoomData) returns (RoomPassKey);

  // Закрыть существующую комнату
  rpc CloseRoom(RoomPassKey) returns (google.protobuf.Empty);

  // Подключить клиента к комнате
  rpc JoinRoom(RoomPassKey) returns (RoomInfo);

  // Подписка на поток входящих сообщений из комнаты
  rpc ReceiveMessages(RoomPassKey) returns (stream Message);

  // Отключить клиента от комнаты
  rpc LeaveRoom(RoomPassKey) returns (google.protobuf.Empty);

  // Обмен параметрами Диффи–Хеллмана
  rpc ExchangeDhParameters(ExchangeData) returns (stream ExchangeData);
  
  // Получение публичных частей
  rpc GetPublicDhParameters(DiffieHellmanQuery) returns (DiffieHellmanData);

  // Отправка зашифрованного сообщения в комнату
  rpc SendMessage(Message) returns (MessageAck);
  
  // Новый RPC: передача файла как последовательности чанков
  rpc SendFile(stream FileChunk) returns (FileAck);

  // Получение файлового потока из комнаты
  rpc ReceiveFile(FileRequest) returns (stream FileChunk);
}

// Алгоритмы симметричного шифрования
enum EncryptAlgo {
  TWOFISH = 0;
  RC6     = 1;
}

enum EncryptMode {
    RD   = 0;
    CTR  = 1;
    ECB  = 2;
    CBC  = 3;
    OFB  = 4;
    PCBC = 5;
    CFB  = 6;
}

enum PaddingMode {
  ISO10126 = 0;
  ANSIX923 = 1;
  PKCS7    = 2;
  ZEROES   = 3;
}

// Ключ комнаты
message RoomPassKey {
  string chat_id = 1;
}

// Все параметры комнаты
message RoomInfo {
  string chat_id = 1;
  string owner_username = 2;
  string creation_time = 3;
  RoomData settings = 4;
}

// Параметры при создании комнаты
message RoomData {
  EncryptAlgo algo       = 1;
  EncryptMode cipherMode = 2;
  PaddingMode padding    = 3;
}


// Заглушка, но может быть использована, для генерации разных констант
message DiffieHellmanQuery {
  string chat_id     = 1;
}


// Часть Диффи–Хеллмана для обмена
message ExchangeData {
  string chat_id     = 1;
  bytes  public_part = 2;
}

// Публичная Часть Диффи–Хеллмана (константы)
message DiffieHellmanData {
  bytes g_value         = 2;
  bytes p_value         = 3;
}


enum MessageType{
  MESSAGE  = 0;
  IMAGE    = 1;
  FILE     = 2;
  NEW_IV   = 3;
}

// Зашифрованное сообщение
message Message {
  string chat_id       = 1;
  bytes  data          = 2;
  string timestamp     = 3;
  MessageType type     = 4;
  string from_username = 5;
  int64 meta           = 6;
}

// Подтверждение доставки сообщения
message MessageAck {
  bool   ok    = 1;
  string error = 2;
}

// Запрос на получение файлового потока
message FileRequest {
  string chat_id    = 1;
  bytes file_name  = 2;   // зашифрованное имя файла
}

// Чанк файла
message FileChunk {
  string chat_id    = 1;
  bytes file_name  = 2;   // зашифрованное имя файла
  bytes  data       = 3;   // зашифрованная часть содержимого
  int64  offset     = 4;   // смещение в байтах для восстановления
  MessageType type  = 5;
}

// Подтверждение приёма файла
message FileAck {
  bool   ok        = 1;
  string error     = 2;
  int64  totalSize = 3;   // общий размер полученного файла
}
