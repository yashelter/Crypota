syntax = "proto3";

option csharp_namespace = "StainsGate";

import "google/protobuf/empty.proto";

package hacking;

// Сервис управления и общения в секретном чате
service HackingGate {
  // Создать новую комнату, возвращает её уникальный идентификатор
  rpc CreateRoom(RoomData) returns (RoomPassKey);

  // Закрыть существующую комнату
  rpc CloseRoom(RoomPassKey) returns (google.protobuf.Empty);

  // Подключить клиента к комнате
  rpc JoinRoom(RoomPassKey) returns (google.protobuf.Empty);

  // Отключить клиента от комнаты
  rpc LeaveRoom(RoomPassKey) returns (google.protobuf.Empty);

  // Обмен параметрами Диффи–Хеллмана
  rpc ExchangeDhParameters(stream ExchangeData) returns (stream ExchangeData);

  // Отправка зашифрованного сообщения в комнату
  rpc SendMessage(Message) returns (MessageAck);

  // Подписка на поток входящих сообщений из комнаты
  rpc ReceiveMessages(RoomPassKey) returns (stream Message);

  // Новый RPC: передача файла как последовательности чанков
  rpc SendFile(stream FileChunk) returns (FileAck);

  // Получение файлового потока из комнаты
  rpc ReceiveFile(FileRequest) returns (stream FileChunk);
}

// Алгоритмы симметричного шифрования
enum EncryptAlgo {
  TWOFISH = 0;
  RC6     = 1;
}

// Ключ комнаты
message RoomPassKey {
  string chat_id = 1;
}

// Параметры при создании комнаты
message RoomData {
  EncryptAlgo encrypt_algo = 1;
}

// Часть Диффи–Хеллмана
message ExchangeData {
  string chat_id     = 1;
  bytes  public_part = 2;
}

// Зашифрованное сообщение
message Message {
  string chat_id = 1;
  bytes  data    = 2;
}

// Подтверждение доставки сообщения
message MessageAck {
  bool   ok    = 1;
  string error = 2;
}

// Запрос на получение файлового потока
message FileRequest {
  string chat_id    = 1;
  string file_name  = 2;   // зашифрованное имя файла
}

// Чанк файла
message FileChunk {
  string chat_id    = 1;
  string file_name  = 2;   // зашифрованное имя файла
  bytes  data       = 3;   // зашифрованная часть содержимого
  int64  offset     = 4;   // смещение в байтах для восстановления
}

// Подтверждение приёма файла
message FileAck {
  bool   ok        = 1;
  string error     = 2;
  int64  totalSize = 3;   // общий размер полученного файла
}
